package com.est.ad.service;

import java.io.StringWriter;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.runtime.RuntimeConstants;
import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

import com.est.ad.entity.AdTemplate;

public class VelocityTemplate {
	 public boolean isValidTemplate() {
	        try {

	            VelocityEngine velocityEngine = new VelocityEngine();
	            
	            velocityEngine.setProperty(RuntimeConstants.RESOURCE_LOADER, "class");
	            velocityEngine.setProperty("class.resource.loader.class", 
	                ClasspathResourceLoader.class.getName());
	            velocityEngine.init();
	            Template template = velocityEngine.getTemplate("templates/ad_script.vm");
	            System.out.println("1");
	            template.merge(new org.apache.velocity.VelocityContext(), new StringWriter());
	            System.out.println("2");
	            return true;
	        }
	        catch (Exception e) {
	            System.err.println("Syntax error in Velocity template: " + e.getMessage());
	            return false;
	        }
	    }
	    public static StringWriter renderTemplate(AdTemplate adTemplate) {
	    	VelocityEngine velocityEngine = new VelocityEngine();
	    	velocityEngine.setProperty(RuntimeConstants.RESOURCE_LOADER, "file");
	    	velocityEngine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, "src/main/resources/templates");
	    	velocityEngine.init();

	        VelocityContext  context = new VelocityContext();

	        context.put("adParams", adTemplate);

	        StringWriter writer = new StringWriter();
	        Template template = velocityEngine.getTemplate("ad_script.vm");
	        template.merge(context, writer);
	        
	        return writer;
	    }
}
